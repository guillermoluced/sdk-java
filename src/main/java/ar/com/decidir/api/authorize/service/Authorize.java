
package ar.com.decidir.api.authorize.service;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "Authorize", targetNamespace = "http://api.decidir.com.ar", wsdlLocation = "file:/D:/GitHub/Decidir/dev-sdk-java/Authorize.wsdl")
public class Authorize
    extends Service
{

    private final static URL AUTHORIZE_WSDL_LOCATION;
    private final static WebServiceException AUTHORIZE_EXCEPTION;
    private final static QName AUTHORIZE_QNAME = new QName("http://api.decidir.com.ar", "Authorize");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:/D:/GitHub/Decidir/dev-sdk-java/Authorize.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        AUTHORIZE_WSDL_LOCATION = url;
        AUTHORIZE_EXCEPTION = e;
    }

    public Authorize() {
        super(__getWsdlLocation(), AUTHORIZE_QNAME);
    }

    public Authorize(WebServiceFeature... features) {
        super(__getWsdlLocation(), AUTHORIZE_QNAME, features);
    }

    public Authorize(URL wsdlLocation) {
        super(wsdlLocation, AUTHORIZE_QNAME);
    }

    public Authorize(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, AUTHORIZE_QNAME, features);
    }

    public Authorize(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Authorize(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns AuthorizePortType
     */
    @WebEndpoint(name = "AuthorizeHttpsSoap11Endpoint")
    public AuthorizePortType getAuthorizeHttpsSoap11Endpoint() {
        return super.getPort(new QName("http://api.decidir.com.ar", "AuthorizeHttpsSoap11Endpoint"), AuthorizePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AuthorizePortType
     */
    @WebEndpoint(name = "AuthorizeHttpsSoap11Endpoint")
    public AuthorizePortType getAuthorizeHttpsSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://api.decidir.com.ar", "AuthorizeHttpsSoap11Endpoint"), AuthorizePortType.class, features);
    }

    /**
     * 
     * @return
     *     returns AuthorizePortType
     */
    @WebEndpoint(name = "AuthorizeHttpSoap11Endpoint")
    public AuthorizePortType getAuthorizeHttpSoap11Endpoint() {
        return super.getPort(new QName("http://api.decidir.com.ar", "AuthorizeHttpSoap11Endpoint"), AuthorizePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AuthorizePortType
     */
    @WebEndpoint(name = "AuthorizeHttpSoap11Endpoint")
    public AuthorizePortType getAuthorizeHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://api.decidir.com.ar", "AuthorizeHttpSoap11Endpoint"), AuthorizePortType.class, features);
    }

    private static URL __getWsdlLocation() {
        if (AUTHORIZE_EXCEPTION!= null) {
            throw AUTHORIZE_EXCEPTION;
        }
        return AUTHORIZE_WSDL_LOCATION;
    }

}
